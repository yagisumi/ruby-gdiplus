# coding: utf-8
require 'test_helper'

class GdiplusEnumIntTest < Test::Unit::TestCase
  include Gdiplus
  
  def test_PixelFormat
    assert_equal(0, PixelFormat::Undefined.to_i)
    assert_match(/Undefined/, PixelFormat::Undefined.inspect)
    assert_equal(0, PixelFormat::DontCare.to_i)
    assert_match(/Undefined/, PixelFormat::DontCare.inspect) #
    
    assert_equal(0x00010000, PixelFormat::Indexed.to_i)
    assert_match(/Indexed/, PixelFormat::Indexed.inspect)
    assert_equal(0x00020000, PixelFormat::GDI.to_i)
    assert_match(/GDI/, PixelFormat::GDI.inspect)
    assert_equal(0x00040000, PixelFormat::Alpha.to_i)
    assert_match(/Alpha/, PixelFormat::Alpha.inspect)
    assert_equal(0x00080000, PixelFormat::PAlpha.to_i)
    assert_match(/PAlpha/, PixelFormat::PAlpha.inspect)
    assert_equal(0x00100000, PixelFormat::Extended.to_i)
    assert_match(/Extended/, PixelFormat::Extended.inspect)
    assert_equal(0x00200000, PixelFormat::Canonical.to_i)
    assert_match(/Canonical/, PixelFormat::Canonical.inspect)
    assert_equal(16, PixelFormat::Max.to_i)
    assert_match(/Max/, PixelFormat::Max.inspect)
    
    _PixelFormat1bppIndexed = (1 | ( 1 << 8) | PixelFormat::Indexed | PixelFormat::GDI)
    _PixelFormat4bppIndexed = (2 | ( 4 << 8) | PixelFormat::Indexed | PixelFormat::GDI)
    _PixelFormat8bppIndexed = (3 | ( 8 << 8) | PixelFormat::Indexed | PixelFormat::GDI)
    _PixelFormat16bppGrayScale = (4 | (16 << 8) | PixelFormat::Extended)
    _PixelFormat16bppRGB555 = (5 | (16 << 8) | PixelFormat::GDI)
    _PixelFormat16bppRGB565 = (6 | (16 << 8) | PixelFormat::GDI)
    _PixelFormat16bppARGB1555 = (7 | (16 << 8) | PixelFormat::Alpha | PixelFormat::GDI)
    _PixelFormat24bppRGB = (8 | (24 << 8) | PixelFormat::GDI)
    _PixelFormat32bppRGB = (9 | (32 << 8) | PixelFormat::GDI)
    _PixelFormat32bppARGB = (10 | (32 << 8) | PixelFormat::Alpha | PixelFormat::GDI | PixelFormat::Canonical)
    _PixelFormat32bppPARGB = (11 | (32 << 8) | PixelFormat::Alpha | PixelFormat::PAlpha | PixelFormat::GDI)
    _PixelFormat48bppRGB = (12 | (48 << 8) | PixelFormat::Extended)
    _PixelFormat64bppARGB = (13 | (64 << 8) | PixelFormat::Alpha  | PixelFormat::Canonical | PixelFormat::Extended)
    _PixelFormat64bppPARGB = (14 | (64 << 8) | PixelFormat::Alpha  | PixelFormat::PAlpha | PixelFormat::Extended)
    _PixelFormat32bppCMYK = (15 | (32 << 8))
    _PixelFormatMax = 16
    
    assert_equal(_PixelFormat1bppIndexed, PixelFormat::Format1bppIndexed.to_i)
    assert_match(/Format1bppIndexed/, PixelFormat::Format1bppIndexed.inspect)
    assert_equal(_PixelFormat4bppIndexed, PixelFormat::Format4bppIndexed.to_i)
    assert_match(/Format4bppIndexed/, PixelFormat::Format4bppIndexed.inspect)
    assert_equal(_PixelFormat4bppIndexed, PixelFormat::Format4bppIndexed.to_i)
    assert_match(/Format4bppIndexed/, PixelFormat::Format4bppIndexed.inspect)
    assert_equal(_PixelFormat8bppIndexed, PixelFormat::Format8bppIndexed.to_i)
    assert_match(/Format8bppIndexed/, PixelFormat::Format8bppIndexed.inspect)
    assert_equal(_PixelFormat16bppGrayScale, PixelFormat::Format16bppGrayScale.to_i)
    assert_match(/Format16bppGrayScale/, PixelFormat::Format16bppGrayScale.inspect)
    assert_equal(_PixelFormat16bppRGB555, PixelFormat::Format16bppRGB555.to_i)
    assert_match(/Format16bppRGB555/, PixelFormat::Format16bppRGB555.inspect)
    assert_equal(_PixelFormat16bppRGB565, PixelFormat::Format16bppRGB565.to_i)
    assert_match(/Format16bppRGB565/, PixelFormat::Format16bppRGB565.inspect)
    assert_equal(_PixelFormat16bppARGB1555, PixelFormat::Format16bppARGB1555.to_i)
    assert_match(/Format16bppARGB1555/, PixelFormat::Format16bppARGB1555.inspect)
    assert_equal(_PixelFormat24bppRGB, PixelFormat::Format24bppRGB.to_i)
    assert_match(/Format24bppRGB/, PixelFormat::Format24bppRGB.inspect)
    assert_equal(_PixelFormat32bppRGB, PixelFormat::Format32bppRGB.to_i)
    assert_match(/Format32bppRGB/, PixelFormat::Format32bppRGB.inspect)
    assert_equal(_PixelFormat32bppARGB, PixelFormat::Format32bppARGB.to_i)
    assert_match(/Format32bppARGB/, PixelFormat::Format32bppARGB.inspect)
    assert_equal(_PixelFormat32bppPARGB, PixelFormat::Format32bppPARGB.to_i)
    assert_match(/Format32bppPARGB/, PixelFormat::Format32bppPARGB.inspect)
    assert_equal(_PixelFormat48bppRGB, PixelFormat::Format48bppRGB.to_i)
    assert_match(/Format48bppRGB/, PixelFormat::Format48bppRGB.inspect)
    assert_equal(_PixelFormat64bppARGB, PixelFormat::Format64bppARGB.to_i)
    assert_match(/Format64bppARGB/, PixelFormat::Format64bppARGB.inspect)
    assert_equal(_PixelFormat64bppPARGB, PixelFormat::Format64bppPARGB.to_i)
    assert_match(/Format64bppPARGB/, PixelFormat::Format64bppPARGB.inspect)
    assert_equal(_PixelFormat32bppCMYK, PixelFormat::Format32bppCMYK.to_i)
    assert_match(/Format32bppCMYK/, PixelFormat::Format32bppCMYK.inspect)
  end
  
  def test_enumint
    assert_equal(PixelFormat::Format32bppARGB.object_id, PixelFormat.Format32bppARGB.object_id)
    #<Gdiplus::PixelFormat.Format32bppARGB: 0x0026200a>
    assert_match(/Format32bppARGB/, PixelFormat::Format32bppARGB.inspect)
    assert_match(/#{PixelFormat::Format32bppARGB.to_i.to_s(16)}/, PixelFormat::Format32bppARGB.inspect)
    assert(PixelFormat::Undefined == 0)
    assert_equal(1, 1 + PixelFormat::Undefined)
    assert_equal(0x30000, PixelFormat.Indexed | PixelFormat.GDI)
    assert_raise(TypeError) { "str" + PixelFormat::Undefined }
  end
  
  def test_ValueType
    assert_equal(0, ValueType.ColorTypeCMYK.to_i)
    assert_match(/ColorTypeCMYK/, ValueType.ColorTypeCMYK.inspect)
    assert_equal(1, ValueType.ColorTypeYCCK.to_i)
    assert_match(/ColorTypeYCCK/, ValueType.ColorTypeYCCK.inspect)
    assert_equal(2, ValueType.CompressionLZW.to_i)
    assert_match(/CompressionLZW/, ValueType.CompressionLZW.inspect)
    assert_equal(3, ValueType.CompressionCCITT3.to_i)
    assert_match(/CompressionCCITT3/, ValueType.CompressionCCITT3.inspect)
    assert_equal(4, ValueType.CompressionCCITT4.to_i)
    assert_match(/CompressionCCITT4/, ValueType.CompressionCCITT4.inspect)
    assert_equal(5, ValueType.CompressionRle.to_i)
    assert_match(/CompressionRle/, ValueType.CompressionRle.inspect)
    assert_equal(6, ValueType.CompressionNone.to_i)
    assert_match(/CompressionNone/, ValueType.CompressionNone.inspect)
    assert_equal(7, ValueType.ScanMethodInterlaced.to_i)
    assert_match(/ScanMethodInterlaced/, ValueType.ScanMethodInterlaced.inspect)
    assert_equal(8, ValueType.ScanMethodNonInterlaced.to_i)
    assert_match(/ScanMethodNonInterlaced/, ValueType.ScanMethodNonInterlaced.inspect)
    assert_equal(9, ValueType.VersionGif87.to_i)
    assert_match(/VersionGif87/, ValueType.VersionGif87.inspect)
    assert_equal(10, ValueType.VersionGif89.to_i)
    assert_match(/VersionGif89/, ValueType.VersionGif89.inspect)
    assert_equal(11, ValueType.RenderProgressive.to_i)
    assert_match(/RenderProgressive/, ValueType.RenderProgressive.inspect)
    assert_equal(12, ValueType.RenderNonProgressive.to_i)
    assert_match(/RenderNonProgressive/, ValueType.RenderNonProgressive.inspect)
    assert_equal(13, ValueType.TransformRotate90.to_i)
    assert_match(/TransformRotate90/, ValueType.TransformRotate90.inspect)
    assert_equal(14, ValueType.TransformRotate180.to_i)
    assert_match(/TransformRotate180/, ValueType.TransformRotate180.inspect)
    assert_equal(15, ValueType.TransformRotate270.to_i)
    assert_match(/TransformRotate270/, ValueType.TransformRotate270.inspect)
    assert_equal(16, ValueType.TransformFlipHorizontal.to_i)
    assert_match(/TransformFlipHorizontal/, ValueType.TransformFlipHorizontal.inspect)
    assert_equal(17, ValueType.TransformFlipVertical.to_i)
    assert_match(/TransformFlipVertical/, ValueType.TransformFlipVertical.inspect)
    assert_equal(18, ValueType.MultiFrame.to_i)
    assert_match(/MultiFrame/, ValueType.MultiFrame.inspect)
    assert_equal(19, ValueType.LastFrame.to_i)
    assert_match(/LastFrame/, ValueType.LastFrame.inspect)
    assert_equal(20, ValueType.Flush.to_i)
    assert_match(/Flush/, ValueType.Flush.inspect)
    assert_equal(21, ValueType.FrameDimensionTime.to_i)
    assert_match(/FrameDimensionTime/, ValueType.FrameDimensionTime.inspect)
    assert_equal(22, ValueType.FrameDimensionResolution.to_i)
    assert_match(/FrameDimensionResolution/, ValueType.FrameDimensionResolution.inspect)
    assert_equal(23, ValueType.FrameDimensionPage.to_i)
    assert_match(/FrameDimensionPage/, ValueType.FrameDimensionPage.inspect)
    assert_equal(24, ValueType.ColorTypeGray.to_i)
    assert_match(/ColorTypeGray/, ValueType.ColorTypeGray.inspect)
    assert_equal(25, ValueType.ColorTypeRGB.to_i)
    assert_match(/ColorTypeRGB/, ValueType.ColorTypeRGB.inspect)
  end
  
  def test_EncoderParameter
    assert_equal(1, EncoderParameterValueType.ValueTypeByte.to_i)
    assert_match(/ValueTypeByte/, EncoderParameterValueType.ValueTypeByte.inspect)
    assert_equal(2, EncoderParameterValueType.ValueTypeASCII.to_i)
    assert_match(/ValueTypeASCII/, EncoderParameterValueType.ValueTypeASCII.inspect)
    assert_equal(3, EncoderParameterValueType.ValueTypeShort.to_i)
    assert_match(/ValueTypeShort/, EncoderParameterValueType.ValueTypeShort.inspect)
    assert_equal(4, EncoderParameterValueType.ValueTypeLong.to_i)
    assert_match(/ValueTypeLong/, EncoderParameterValueType.ValueTypeLong.inspect)
    assert_equal(5, EncoderParameterValueType.ValueTypeRational.to_i)
    assert_match(/ValueTypeRational/, EncoderParameterValueType.ValueTypeRational.inspect)
    assert_equal(6, EncoderParameterValueType.ValueTypeLongRange.to_i)
    assert_match(/ValueTypeLongRange/, EncoderParameterValueType.ValueTypeLongRange.inspect)
    assert_equal(7, EncoderParameterValueType.ValueTypeUndefined.to_i)
    assert_match(/ValueTypeUndefined/, EncoderParameterValueType.ValueTypeUndefined.inspect)
    assert_equal(8, EncoderParameterValueType.ValueTypeRationalRange.to_i)
    assert_match(/ValueTypeRationalRange/, EncoderParameterValueType.ValueTypeRationalRange.inspect)
    assert_equal(9, EncoderParameterValueType.ValueTypePointer.to_i)
    assert_match(/ValueTypePointer/, EncoderParameterValueType.ValueTypePointer.inspect)
  end
  
  def test_Encoder
    assert_kind_of(Guid, Encoder.Quality)
    assert_equal("1d5be4b5-fa4a-452d-9cdd-5db35105e7eb", Encoder.Quality.to_s)
    assert_match(/Compression/, Encoder.Compression.inspect)
    assert_match(/ColorDepth/, Encoder.ColorDepth.inspect)
    assert_match(/ScanMethod/, Encoder.ScanMethod.inspect)
    assert_match(/Version/, Encoder.Version.inspect)
    assert_match(/RenderMethod/, Encoder.RenderMethod.inspect)
    assert_match(/Quality/, Encoder.Quality.inspect)
    assert_match(/Transformation/, Encoder.Transformation.inspect)
    assert_match(/LuminanceTable/, Encoder.LuminanceTable.inspect)
    assert_match(/ChrominanceTable/, Encoder.ChrominanceTable.inspect)
    assert_match(/SaveFlag/, Encoder.SaveFlag.inspect)
  end
  
  
end

__END__
#assert_equal(expected, actual, message=nil)
#assert_raise(expected_exception_klass, message="") { ... }
#assert_not_equal(expected, actual, message="")
#assert_instance_of(klass, object, message="")
#assert_nil(object, message="")
#assert_not_nil(object, message="")
#assert_kind_of(klass, object, message="")
#assert_respond_to(object, method, message="")
#assert_match(regexp, string, message="")
#assert_no_match(regexp, string, message="")
#assert_same(expected, actual, message="")
#assert_not_same(expected, actual, message="")
#assert_operator(object1, operator, object2, message="")
#assert_nothing_raised(klass1, klass2, ..., message = "") { ... } # klass1, klass2, ... => fail / others => error
#assert_block(message="assert_block failed.") { ... } # (block -> true) => pass
#assert_throws(expected_symbol, message="") { ... }
#assert_nothing_thrown(message="") { ... }
