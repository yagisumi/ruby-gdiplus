# coding: utf-8
require 'test_helper'

class GdiplusColorTest < Test::Unit::TestCase
  include Gdiplus
  
  def test_color_args
    assert_instance_of(Color, Color.new())
    assert_instance_of(Color, Color.new(0xff000000))
    assert_instance_of(Color, Color.new(0xff000000))
    assert_instance_of(Color, Color.new(1.1)) # 1.1 has to_int
    assert_instance_of(Color, Color.new(128, Color.new(0xf0123456)))
    assert_instance_of(Color, Color.new(128, :Red))
    assert_instance_of(Color, Color.new(255, 0, 0))
    assert_instance_of(Color, Color.new(200, 255, 0, 0))
    assert_raise(ArgumentError) { Color.new(1, 2, 3, 4, 5) }
    assert_raise(TypeError) { Color.new("1") }
    assert_raise(TypeError) { Color.new(128, 255) }
    assert_raise(TypeError) { Color.new("1", Color.new) }
    assert_raise(TypeError) { Color.new(1, 2, "3") }
    assert_raise(TypeError) { Color.new(1, 2, 3, "4") }
    
    assert_instance_of(Color, Color.FromArgb())
    assert_instance_of(Color, Color.from_argb())
    assert_instance_of(Color, Color.FromArgb(0xff000000))
    assert_instance_of(Color, Color.FromArgb(1.1)) # 1.1 has to_int
    assert_instance_of(Color, Color.FromArgb(128, Color.FromArgb(0xf0123456)))
    assert_instance_of(Color, Color.from_argb(128, :Red))
    assert_instance_of(Color, Color.FromArgb(255, 0, 0))
    assert_instance_of(Color, Color.FromArgb(200, 255, 0, 0))
    assert_raise(ArgumentError) { Color.FromArgb(1, 2, 3, 4, 5) }
    assert_raise(TypeError) { Color.FromArgb("1") }
    assert_raise(TypeError) { Color.FromArgb(128, 255) }
    assert_raise(TypeError) { Color.FromArgb("1", Color.FromArgb) }
    assert_raise(TypeError) { Color.FromArgb(1, 2, "3") }
    assert_raise(TypeError) { Color.FromArgb(1, 2, 3, "4") }
  end
  
  def test_color_int
    assert_equal(0xff000000, Color.new.to_i)
    assert_equal(0xff112233, Color.new(0xff112233).to_i)
    assert_equal(1, Color.new(1.1).to_i) # 1.1 has to_int
    assert_equal(0xff112233, Color.new(0x11, 0x22, 0x33).to_i)
    assert_equal(0xff112233, Color.new(0xff, 0x11, 0x22, 0x33).to_i)
    assert_equal(0x88112233, Color.new(0x88, Color.new(0xff112233)).to_i)
    assert_equal(0xff112233, Color.new(0x111, 0x222, 0x333).to_i)

    assert_equal(0xff000000, Color.FromArgb.to_i)
    assert_equal(0xff112233, Color.FromArgb(0xff112233).to_i)
    assert_equal(1, Color.FromArgb(1.1).to_i) # 1.1 has to_int
    assert_equal(0xff112233, Color.FromArgb(0x11, 0x22, 0x33).to_i)
    assert_equal(0xff112233, Color.FromArgb(0xff, 0x11, 0x22, 0x33).to_i)
    assert_equal(0x88112233, Color.FromArgb(0x88, Color.FromArgb(0xff112233)).to_i)
    assert_equal(0xff112233, Color.FromArgb(0x111, 0x222, 0x333).to_i)
  end
  
  def test_color_equal
    assert_equal(true, Color.new == Color.new)
    assert_equal(true, Color.new(255, 255, 255) == Color.new(255, 255, 255, 255))
    assert_equal(true, Color.new(0xffffffff) == 0xffffffff)
    assert_equal(false, Color.new == 1.1)
    assert_equal(false, Color.new == "1")
    assert_equal(Color.Blue, Color.new(:Blue))
  end
  
  def test_color_property
    color = Color.new(0xff113355)
    assert_equal(0xff, color.A)
    assert_equal(0xff, color.a)
    assert_equal(0x11, color.R)
    assert_equal(0x11, color.r)
    assert_equal(0x33, color.G)
    assert_equal(0x33, color.g)
    assert_equal(0x55, color.B)
    assert_equal(0x55, color.b)
  end
  
  
  def test_color_constants
    assert_equal(0xFFF0F8FF, Color::AliceBlue.to_i)
    assert_equal(0xFFF0F8FF, Color.AliceBlue.to_i)
    assert_equal(0xFFFAEBD7, Color::AntiqueWhite.to_i)
    assert_equal(0xFFFAEBD7, Color.AntiqueWhite.to_i)
    assert_equal(0xFF00FFFF, Color::Aqua.to_i)
    assert_equal(0xFF00FFFF, Color.Aqua.to_i)
    assert_equal(0xFF7FFFD4, Color::Aquamarine.to_i)
    assert_equal(0xFF7FFFD4, Color.Aquamarine.to_i)
    assert_equal(0xFFF0FFFF, Color::Azure.to_i)
    assert_equal(0xFFF0FFFF, Color.Azure.to_i)
    assert_equal(0xFFF5F5DC, Color::Beige.to_i)
    assert_equal(0xFFF5F5DC, Color.Beige.to_i)
    assert_equal(0xFFFFE4C4, Color::Bisque.to_i)
    assert_equal(0xFFFFE4C4, Color.Bisque.to_i)
    assert_equal(0xFF000000, Color::Black.to_i)
    assert_equal(0xFF000000, Color.Black.to_i)
    assert_equal(0xFFFFEBCD, Color::BlanchedAlmond.to_i)
    assert_equal(0xFFFFEBCD, Color.BlanchedAlmond.to_i)
    assert_equal(0xFF0000FF, Color::Blue.to_i)
    assert_equal(0xFF0000FF, Color.Blue.to_i)
    assert_equal(0xFF8A2BE2, Color::BlueViolet.to_i)
    assert_equal(0xFF8A2BE2, Color.BlueViolet.to_i)
    assert_equal(0xFFA52A2A, Color::Brown.to_i)
    assert_equal(0xFFA52A2A, Color.Brown.to_i)
    assert_equal(0xFFDEB887, Color::BurlyWood.to_i)
    assert_equal(0xFFDEB887, Color.BurlyWood.to_i)
    assert_equal(0xFF5F9EA0, Color::CadetBlue.to_i)
    assert_equal(0xFF5F9EA0, Color.CadetBlue.to_i)
    assert_equal(0xFF7FFF00, Color::Chartreuse.to_i)
    assert_equal(0xFF7FFF00, Color.Chartreuse.to_i)
    assert_equal(0xFFD2691E, Color::Chocolate.to_i)
    assert_equal(0xFFD2691E, Color.Chocolate.to_i)
    assert_equal(0xFFFF7F50, Color::Coral.to_i)
    assert_equal(0xFFFF7F50, Color.Coral.to_i)
    assert_equal(0xFF6495ED, Color::CornflowerBlue.to_i)
    assert_equal(0xFF6495ED, Color.CornflowerBlue.to_i)
    assert_equal(0xFFFFF8DC, Color::Cornsilk.to_i)
    assert_equal(0xFFFFF8DC, Color.Cornsilk.to_i)
    assert_equal(0xFFDC143C, Color::Crimson.to_i)
    assert_equal(0xFFDC143C, Color.Crimson.to_i)
    assert_equal(0xFF00FFFF, Color::Cyan.to_i)
    assert_equal(0xFF00FFFF, Color.Cyan.to_i)
    assert_equal(0xFF00008B, Color::DarkBlue.to_i)
    assert_equal(0xFF00008B, Color.DarkBlue.to_i)
    assert_equal(0xFF008B8B, Color::DarkCyan.to_i)
    assert_equal(0xFF008B8B, Color.DarkCyan.to_i)
    assert_equal(0xFFB8860B, Color::DarkGoldenrod.to_i)
    assert_equal(0xFFB8860B, Color.DarkGoldenrod.to_i)
    assert_equal(0xFFA9A9A9, Color::DarkGray.to_i)
    assert_equal(0xFFA9A9A9, Color.DarkGray.to_i)
    assert_equal(0xFF006400, Color::DarkGreen.to_i)
    assert_equal(0xFF006400, Color.DarkGreen.to_i)
    assert_equal(0xFFBDB76B, Color::DarkKhaki.to_i)
    assert_equal(0xFFBDB76B, Color.DarkKhaki.to_i)
    assert_equal(0xFF8B008B, Color::DarkMagenta.to_i)
    assert_equal(0xFF8B008B, Color.DarkMagenta.to_i)
    assert_equal(0xFF556B2F, Color::DarkOliveGreen.to_i)
    assert_equal(0xFF556B2F, Color.DarkOliveGreen.to_i)
    assert_equal(0xFFFF8C00, Color::DarkOrange.to_i)
    assert_equal(0xFFFF8C00, Color.DarkOrange.to_i)
    assert_equal(0xFF9932CC, Color::DarkOrchid.to_i)
    assert_equal(0xFF9932CC, Color.DarkOrchid.to_i)
    assert_equal(0xFF8B0000, Color::DarkRed.to_i)
    assert_equal(0xFF8B0000, Color.DarkRed.to_i)
    assert_equal(0xFFE9967A, Color::DarkSalmon.to_i)
    assert_equal(0xFFE9967A, Color.DarkSalmon.to_i)
    assert_equal(0xFF8FBC8B, Color::DarkSeaGreen.to_i)
    assert_equal(0xFF8FBC8B, Color.DarkSeaGreen.to_i)
    assert_equal(0xFF483D8B, Color::DarkSlateBlue.to_i)
    assert_equal(0xFF483D8B, Color.DarkSlateBlue.to_i)
    assert_equal(0xFF2F4F4F, Color::DarkSlateGray.to_i)
    assert_equal(0xFF2F4F4F, Color.DarkSlateGray.to_i)
    assert_equal(0xFF00CED1, Color::DarkTurquoise.to_i)
    assert_equal(0xFF00CED1, Color.DarkTurquoise.to_i)
    assert_equal(0xFF9400D3, Color::DarkViolet.to_i)
    assert_equal(0xFF9400D3, Color.DarkViolet.to_i)
    assert_equal(0xFFFF1493, Color::DeepPink.to_i)
    assert_equal(0xFFFF1493, Color.DeepPink.to_i)
    assert_equal(0xFF00BFFF, Color::DeepSkyBlue.to_i)
    assert_equal(0xFF00BFFF, Color.DeepSkyBlue.to_i)
    assert_equal(0xFF696969, Color::DimGray.to_i)
    assert_equal(0xFF696969, Color.DimGray.to_i)
    assert_equal(0xFF1E90FF, Color::DodgerBlue.to_i)
    assert_equal(0xFF1E90FF, Color.DodgerBlue.to_i)
    assert_equal(0xFFB22222, Color::Firebrick.to_i)
    assert_equal(0xFFB22222, Color.Firebrick.to_i)
    assert_equal(0xFFFFFAF0, Color::FloralWhite.to_i)
    assert_equal(0xFFFFFAF0, Color.FloralWhite.to_i)
    assert_equal(0xFF228B22, Color::ForestGreen.to_i)
    assert_equal(0xFF228B22, Color.ForestGreen.to_i)
    assert_equal(0xFFFF00FF, Color::Fuchsia.to_i)
    assert_equal(0xFFFF00FF, Color.Fuchsia.to_i)
    assert_equal(0xFFDCDCDC, Color::Gainsboro.to_i)
    assert_equal(0xFFDCDCDC, Color.Gainsboro.to_i)
    assert_equal(0xFFF8F8FF, Color::GhostWhite.to_i)
    assert_equal(0xFFF8F8FF, Color.GhostWhite.to_i)
    assert_equal(0xFFFFD700, Color::Gold.to_i)
    assert_equal(0xFFFFD700, Color.Gold.to_i)
    assert_equal(0xFFDAA520, Color::Goldenrod.to_i)
    assert_equal(0xFFDAA520, Color.Goldenrod.to_i)
    assert_equal(0xFF808080, Color::Gray.to_i)
    assert_equal(0xFF808080, Color.Gray.to_i)
    assert_equal(0xFF008000, Color::Green.to_i)
    assert_equal(0xFF008000, Color.Green.to_i)
    assert_equal(0xFFADFF2F, Color::GreenYellow.to_i)
    assert_equal(0xFFADFF2F, Color.GreenYellow.to_i)
    assert_equal(0xFFF0FFF0, Color::Honeydew.to_i)
    assert_equal(0xFFF0FFF0, Color.Honeydew.to_i)
    assert_equal(0xFFFF69B4, Color::HotPink.to_i)
    assert_equal(0xFFFF69B4, Color.HotPink.to_i)
    assert_equal(0xFFCD5C5C, Color::IndianRed.to_i)
    assert_equal(0xFFCD5C5C, Color.IndianRed.to_i)
    assert_equal(0xFF4B0082, Color::Indigo.to_i)
    assert_equal(0xFF4B0082, Color.Indigo.to_i)
    assert_equal(0xFFFFFFF0, Color::Ivory.to_i)
    assert_equal(0xFFFFFFF0, Color.Ivory.to_i)
    assert_equal(0xFFF0E68C, Color::Khaki.to_i)
    assert_equal(0xFFF0E68C, Color.Khaki.to_i)
    assert_equal(0xFFE6E6FA, Color::Lavender.to_i)
    assert_equal(0xFFE6E6FA, Color.Lavender.to_i)
    assert_equal(0xFFFFF0F5, Color::LavenderBlush.to_i)
    assert_equal(0xFFFFF0F5, Color.LavenderBlush.to_i)
    assert_equal(0xFF7CFC00, Color::LawnGreen.to_i)
    assert_equal(0xFF7CFC00, Color.LawnGreen.to_i)
    assert_equal(0xFFFFFACD, Color::LemonChiffon.to_i)
    assert_equal(0xFFFFFACD, Color.LemonChiffon.to_i)
    assert_equal(0xFFADD8E6, Color::LightBlue.to_i)
    assert_equal(0xFFADD8E6, Color.LightBlue.to_i)
    assert_equal(0xFFF08080, Color::LightCoral.to_i)
    assert_equal(0xFFF08080, Color.LightCoral.to_i)
    assert_equal(0xFFE0FFFF, Color::LightCyan.to_i)
    assert_equal(0xFFE0FFFF, Color.LightCyan.to_i)
    assert_equal(0xFFFAFAD2, Color::LightGoldenrodYellow.to_i)
    assert_equal(0xFFFAFAD2, Color.LightGoldenrodYellow.to_i)
    assert_equal(0xFFD3D3D3, Color::LightGray.to_i)
    assert_equal(0xFFD3D3D3, Color.LightGray.to_i)
    assert_equal(0xFF90EE90, Color::LightGreen.to_i)
    assert_equal(0xFF90EE90, Color.LightGreen.to_i)
    assert_equal(0xFFFFB6C1, Color::LightPink.to_i)
    assert_equal(0xFFFFB6C1, Color.LightPink.to_i)
    assert_equal(0xFFFFA07A, Color::LightSalmon.to_i)
    assert_equal(0xFFFFA07A, Color.LightSalmon.to_i)
    assert_equal(0xFF20B2AA, Color::LightSeaGreen.to_i)
    assert_equal(0xFF20B2AA, Color.LightSeaGreen.to_i)
    assert_equal(0xFF87CEFA, Color::LightSkyBlue.to_i)
    assert_equal(0xFF87CEFA, Color.LightSkyBlue.to_i)
    assert_equal(0xFF778899, Color::LightSlateGray.to_i)
    assert_equal(0xFF778899, Color.LightSlateGray.to_i)
    assert_equal(0xFFB0C4DE, Color::LightSteelBlue.to_i)
    assert_equal(0xFFB0C4DE, Color.LightSteelBlue.to_i)
    assert_equal(0xFFFFFFE0, Color::LightYellow.to_i)
    assert_equal(0xFFFFFFE0, Color.LightYellow.to_i)
    assert_equal(0xFF00FF00, Color::Lime.to_i)
    assert_equal(0xFF00FF00, Color.Lime.to_i)
    assert_equal(0xFF32CD32, Color::LimeGreen.to_i)
    assert_equal(0xFF32CD32, Color.LimeGreen.to_i)
    assert_equal(0xFFFAF0E6, Color::Linen.to_i)
    assert_equal(0xFFFAF0E6, Color.Linen.to_i)
    assert_equal(0xFFFF00FF, Color::Magenta.to_i)
    assert_equal(0xFFFF00FF, Color.Magenta.to_i)
    assert_equal(0xFF800000, Color::Maroon.to_i)
    assert_equal(0xFF800000, Color.Maroon.to_i)
    assert_equal(0xFF66CDAA, Color::MediumAquamarine.to_i)
    assert_equal(0xFF66CDAA, Color.MediumAquamarine.to_i)
    assert_equal(0xFF0000CD, Color::MediumBlue.to_i)
    assert_equal(0xFF0000CD, Color.MediumBlue.to_i)
    assert_equal(0xFFBA55D3, Color::MediumOrchid.to_i)
    assert_equal(0xFFBA55D3, Color.MediumOrchid.to_i)
    assert_equal(0xFF9370DB, Color::MediumPurple.to_i)
    assert_equal(0xFF9370DB, Color.MediumPurple.to_i)
    assert_equal(0xFF3CB371, Color::MediumSeaGreen.to_i)
    assert_equal(0xFF3CB371, Color.MediumSeaGreen.to_i)
    assert_equal(0xFF7B68EE, Color::MediumSlateBlue.to_i)
    assert_equal(0xFF7B68EE, Color.MediumSlateBlue.to_i)
    assert_equal(0xFF00FA9A, Color::MediumSpringGreen.to_i)
    assert_equal(0xFF00FA9A, Color.MediumSpringGreen.to_i)
    assert_equal(0xFF48D1CC, Color::MediumTurquoise.to_i)
    assert_equal(0xFF48D1CC, Color.MediumTurquoise.to_i)
    assert_equal(0xFFC71585, Color::MediumVioletRed.to_i)
    assert_equal(0xFFC71585, Color.MediumVioletRed.to_i)
    assert_equal(0xFF191970, Color::MidnightBlue.to_i)
    assert_equal(0xFF191970, Color.MidnightBlue.to_i)
    assert_equal(0xFFF5FFFA, Color::MintCream.to_i)
    assert_equal(0xFFF5FFFA, Color.MintCream.to_i)
    assert_equal(0xFFFFE4E1, Color::MistyRose.to_i)
    assert_equal(0xFFFFE4E1, Color.MistyRose.to_i)
    assert_equal(0xFFFFE4B5, Color::Moccasin.to_i)
    assert_equal(0xFFFFE4B5, Color.Moccasin.to_i)
    assert_equal(0xFFFFDEAD, Color::NavajoWhite.to_i)
    assert_equal(0xFFFFDEAD, Color.NavajoWhite.to_i)
    assert_equal(0xFF000080, Color::Navy.to_i)
    assert_equal(0xFF000080, Color.Navy.to_i)
    assert_equal(0xFFFDF5E6, Color::OldLace.to_i)
    assert_equal(0xFFFDF5E6, Color.OldLace.to_i)
    assert_equal(0xFF808000, Color::Olive.to_i)
    assert_equal(0xFF808000, Color.Olive.to_i)
    assert_equal(0xFF6B8E23, Color::OliveDrab.to_i)
    assert_equal(0xFF6B8E23, Color.OliveDrab.to_i)
    assert_equal(0xFFFFA500, Color::Orange.to_i)
    assert_equal(0xFFFFA500, Color.Orange.to_i)
    assert_equal(0xFFFF4500, Color::OrangeRed.to_i)
    assert_equal(0xFFFF4500, Color.OrangeRed.to_i)
    assert_equal(0xFFDA70D6, Color::Orchid.to_i)
    assert_equal(0xFFDA70D6, Color.Orchid.to_i)
    assert_equal(0xFFEEE8AA, Color::PaleGoldenrod.to_i)
    assert_equal(0xFFEEE8AA, Color.PaleGoldenrod.to_i)
    assert_equal(0xFF98FB98, Color::PaleGreen.to_i)
    assert_equal(0xFF98FB98, Color.PaleGreen.to_i)
    assert_equal(0xFFAFEEEE, Color::PaleTurquoise.to_i)
    assert_equal(0xFFAFEEEE, Color.PaleTurquoise.to_i)
    assert_equal(0xFFDB7093, Color::PaleVioletRed.to_i)
    assert_equal(0xFFDB7093, Color.PaleVioletRed.to_i)
    assert_equal(0xFFFFEFD5, Color::PapayaWhip.to_i)
    assert_equal(0xFFFFEFD5, Color.PapayaWhip.to_i)
    assert_equal(0xFFFFDAB9, Color::PeachPuff.to_i)
    assert_equal(0xFFFFDAB9, Color.PeachPuff.to_i)
    assert_equal(0xFFCD853F, Color::Peru.to_i)
    assert_equal(0xFFCD853F, Color.Peru.to_i)
    assert_equal(0xFFFFC0CB, Color::Pink.to_i)
    assert_equal(0xFFFFC0CB, Color.Pink.to_i)
    assert_equal(0xFFDDA0DD, Color::Plum.to_i)
    assert_equal(0xFFDDA0DD, Color.Plum.to_i)
    assert_equal(0xFFB0E0E6, Color::PowderBlue.to_i)
    assert_equal(0xFFB0E0E6, Color.PowderBlue.to_i)
    assert_equal(0xFF800080, Color::Purple.to_i)
    assert_equal(0xFF800080, Color.Purple.to_i)
    assert_equal(0xFFFF0000, Color::Red.to_i)
    assert_equal(0xFFFF0000, Color.Red.to_i)
    assert_equal(0xFFBC8F8F, Color::RosyBrown.to_i)
    assert_equal(0xFFBC8F8F, Color.RosyBrown.to_i)
    assert_equal(0xFF4169E1, Color::RoyalBlue.to_i)
    assert_equal(0xFF4169E1, Color.RoyalBlue.to_i)
    assert_equal(0xFF8B4513, Color::SaddleBrown.to_i)
    assert_equal(0xFF8B4513, Color.SaddleBrown.to_i)
    assert_equal(0xFFFA8072, Color::Salmon.to_i)
    assert_equal(0xFFFA8072, Color.Salmon.to_i)
    assert_equal(0xFFF4A460, Color::SandyBrown.to_i)
    assert_equal(0xFFF4A460, Color.SandyBrown.to_i)
    assert_equal(0xFF2E8B57, Color::SeaGreen.to_i)
    assert_equal(0xFF2E8B57, Color.SeaGreen.to_i)
    assert_equal(0xFFFFF5EE, Color::SeaShell.to_i)
    assert_equal(0xFFFFF5EE, Color.SeaShell.to_i)
    assert_equal(0xFFA0522D, Color::Sienna.to_i)
    assert_equal(0xFFA0522D, Color.Sienna.to_i)
    assert_equal(0xFFC0C0C0, Color::Silver.to_i)
    assert_equal(0xFFC0C0C0, Color.Silver.to_i)
    assert_equal(0xFF87CEEB, Color::SkyBlue.to_i)
    assert_equal(0xFF87CEEB, Color.SkyBlue.to_i)
    assert_equal(0xFF6A5ACD, Color::SlateBlue.to_i)
    assert_equal(0xFF6A5ACD, Color.SlateBlue.to_i)
    assert_equal(0xFF708090, Color::SlateGray.to_i)
    assert_equal(0xFF708090, Color.SlateGray.to_i)
    assert_equal(0xFFFFFAFA, Color::Snow.to_i)
    assert_equal(0xFFFFFAFA, Color.Snow.to_i)
    assert_equal(0xFF00FF7F, Color::SpringGreen.to_i)
    assert_equal(0xFF00FF7F, Color.SpringGreen.to_i)
    assert_equal(0xFF4682B4, Color::SteelBlue.to_i)
    assert_equal(0xFF4682B4, Color.SteelBlue.to_i)
    assert_equal(0xFFD2B48C, Color::Tan.to_i)
    assert_equal(0xFFD2B48C, Color.Tan.to_i)
    assert_equal(0xFF008080, Color::Teal.to_i)
    assert_equal(0xFF008080, Color.Teal.to_i)
    assert_equal(0xFFD8BFD8, Color::Thistle.to_i)
    assert_equal(0xFFD8BFD8, Color.Thistle.to_i)
    assert_equal(0xFFFF6347, Color::Tomato.to_i)
    assert_equal(0xFFFF6347, Color.Tomato.to_i)
    assert_equal(0x00FFFFFF, Color::Transparent.to_i)
    assert_equal(0x00FFFFFF, Color.Transparent.to_i)
    assert_equal(0xFF40E0D0, Color::Turquoise.to_i)
    assert_equal(0xFF40E0D0, Color.Turquoise.to_i)
    assert_equal(0xFFEE82EE, Color::Violet.to_i)
    assert_equal(0xFFEE82EE, Color.Violet.to_i)
    assert_equal(0xFFF5DEB3, Color::Wheat.to_i)
    assert_equal(0xFFF5DEB3, Color.Wheat.to_i)
    assert_equal(0xFFFFFFFF, Color::White.to_i)
    assert_equal(0xFFFFFFFF, Color.White.to_i)
    assert_equal(0xFFF5F5F5, Color::WhiteSmoke.to_i)
    assert_equal(0xFFF5F5F5, Color.WhiteSmoke.to_i)
    assert_equal(0xFFFFFF00, Color::Yellow.to_i)
    assert_equal(0xFFFFFF00, Color.Yellow.to_i)
    assert_equal(0xFF9ACD32, Color::YellowGreen.to_i)
    assert_equal(0xFF9ACD32, Color.YellowGreen.to_i)
  end
  
  
end

__END__
#assert_equal(expected, actual, message=nil)
#assert_raise(expected_exception_klass, message="") { ... }
#assert_not_equal(expected, actual, message="")
#assert_instance_of(klass, object, message="")
#assert_kind_of(klass, object, message="")
#assert_nil(object, message="")
#assert_not_nil(object, message="")
#assert_respond_to(object, method, message="")
#assert_match(regexp, string, message="")
#assert_no_match(regexp, string, message="")
#_assert_output(stdout=nil, stderr=nil, verbose=nil) { ... }
#_assert_silent(verbose=nil) { ... }
#_assert_stderr(stderr, verbose=nil) { ... }
#_assert_stderr_silent(verbose=nil) { ... }
#_assert_stdout(stdout, verbose=nil) { ... }
#_assert_stdout_silent(verbose=nil) { ... }
#assert_same(expected, actual, message="")
#assert_not_same(expected, actual, message="")
#assert_operator(object1, operator, object2, message="")
#assert_nothing_raised(klass1, klass2, ..., message = "") { ... } # klass1, klass2, ... => fail / others => error
#assert_block(message="assert_block failed.") { ... } # (block -> true) => pass
#assert_throws(expected_symbol, message="") { ... }
#assert_nothing_thrown(message="") { ... }
